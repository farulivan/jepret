<?php

namespace Tests\Unit\Services;

use App\Models\User;
use App\Repositories\User\Eloquent\UserRepository;
use App\Services\UserServices\UserService;
use App\Services\UserServices\UserServiceInterface;
use PHPUnit\Framework\Attributes\DataProviderExternal;
use Tests\TestCase;

class UserServiceTest extends TestCase
{
    protected UserServiceInterface $userService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userService = (new UserService(
            userRepository: (new UserRepository(
                (new User())
            ))
        ));
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_by_email_success($email, $password)
    {
        $user = $this->userService->getByEmail($email);
        $this->assertNotEmpty($user);
        $this->assertIsObject($user);
        $this->assertEquals($user->email, $email);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_by_email_failed($email, $password)
    {
        $email = $email . '_xxx';
        $user = $this->userService->getByEmail($email);
        $this->assertEmpty($user);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_by_id_success($email, $password)
    {
        $user = $this->userService->getByEmail($email);
        $user = $this->userService->getById($user->id);
        $this->assertNotEmpty($user);
        $this->assertIsObject($user);
        $this->assertEquals($user->email, $email);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_by_id_failed($email, $password)
    {
        $user = $this->userService->getByEmail($email);
        $user = $this->userService->getById(hash('sha256', $user->id));
        $this->assertEmpty($user);
    }
}
