<?php

namespace Tests\Unit\Services;

use App\Models\User;
use App\Repositories\Token\Sanctum\TokenRepository;
use App\Repositories\User\Eloquent\UserRepository;
use App\Services\AuthServices\AuthServiceInterface;
use PHPUnit\Framework\Attributes\DataProviderExternal;
use Tests\TestCase;

class AuthServiceTest extends TestCase
{
    protected AuthServiceInterface $authService;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->authService = (new \App\Services\AuthServices\AuthService(
            userRepository: (new UserRepository((new User()))),tokenRepository: (new TokenRepository())
        ));
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_auth_attempt_valid_success($email, $password)
    {
        $isSuccess = $this->authService->isAuthAttemptValid([
            'email' => $email,
            'password' => $password
        ]);

        $this->assertTrue($isSuccess);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_auth_attempt_valid_failed($email, $password)
    {
        $isSuccess = $this->authService->isAuthAttemptValid([
            'email' => $email,
            'password' => $password . 'xxx'
        ]);

        $this->assertFalse($isSuccess);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_create_access_token_success($email, $password)
    {
        $accessToken = $this->authService->createAccessToken(
            user: User::query()->where('email', $email)->first() ?? ((object) [])
        );

        $this->assertTrue(is_string($accessToken));
        $this->assertNotEmpty($accessToken);
        $this->assertStringContainsString('|', $accessToken);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_create_access_token_failed($email, $password)
    {
        $this->expectException(\Throwable::class);
        $accessToken = $this->authService->createAccessToken(
            user: ((object) [])
        );
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_create_refresh_token_success($email, $password)
    {
        $refreshToken = $this->authService->createRefreshToken(
            user: User::query()->where('email', $email)->first() ?? ((object) [])
        );

        $this->assertTrue(is_string($refreshToken));
        $this->assertNotEmpty($refreshToken);
        $this->assertStringContainsString('|', $refreshToken);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_create_refresh_token_failed($email, $password)
    {
        $this->expectException(\Throwable::class);
        $refreshToken = $this->authService->createRefreshToken(
            user: ((object) [])
        );
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_user_from_token_success($email, $password)
    {
        $accessToken = $this->authService->createAccessToken(
            user: User::query()->where('email', $email)->first() ?? ((object) [])
        );
        $user = $this->authService->getUserFromToken(
            refreshToken: $accessToken
        );

        $this->assertNotEmpty($user);
        $this->assertIsObject($user);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_get_user_from_token_failed($email, $password)
    {
        $user = $this->authService->getUserFromToken(
            refreshToken: hash('sha256', $email)
        );

        $this->assertEmpty($user);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_access_token_valid_success($email, $password)
    {
        $accessToken = $this->authService->createAccessToken(
            user: User::query()->where('email', $email)->first() ?? ((object) [])
        );
        $isValid = $this->authService->isAccessTokenValid(
            accessToken: $accessToken
        );

        $this->assertTrue($isValid);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_access_token_valid_failed($email, $password)
    {
        $isValid = $this->authService->isAccessTokenValid(
            accessToken: hash('sha256', $email)
        );

        $this->assertFalse($isValid);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_refresh_token_valid_success($email, $password)
    {
        $accessToken = $this->authService->createRefreshToken(
            user: User::query()->where('email', $email)->first() ?? ((object) [])
        );
        $isValid = $this->authService->isRefreshTokenValid(
            refreshToken: $accessToken
        );

        $this->assertTrue($isValid);
    }

    #[DataProviderExternal('Tests\DataProviders\UserDataProvider', 'getUserData')]
    public function test_is_refresh_token_valid_failed($email, $password)
    {
        $isValid = $this->authService->isRefreshTokenValid(
            refreshToken: hash('sha256', $email)
        );

        $this->assertFalse($isValid);
    }
}
